"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/tintuc/addnew",{

/***/ "./demo/service/NewService.js":
/*!************************************!*\
  !*** ./demo/service/NewService.js ***!
  \************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"NewService\": function() { return /* binding */ NewService; }\n/* harmony export */ });\nconst NewService = {\n    gettintuc () {\n        return fetch(\"http://localhost:3000/tintucs\", {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Cache-Control\": \"no-cache\"\n            }\n        }).then((res)=>{\n            if (!res.ok) {\n                throw new Error(\"Lỗi: \".concat(res.status, \" \").concat(res.statusText));\n            }\n            return res.status === 204 ? null : res.json(); // Tránh lỗi khi API trả về 204\n        }).then((data)=>data || []) // Trả về mảng rỗng nếu không có dữ liệu\n        .catch((error)=>{\n            console.error(\"Lỗi khi lấy dữ liệu tin tức:\", error);\n            return [];\n        });\n    },\n    gettintucbyid (id) {\n        return fetch(\"http://localhost:3000/tintucs/\".concat(id), {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Cache-Control\": \"no-cache\"\n            }\n        }).then((res)=>{\n            if (!res.ok) {\n                throw new Error(\"Lỗi: \".concat(res.status, \" \").concat(res.statusText));\n            }\n            return res.json(); // Trả về dữ liệu phản hồi từ server\n        }).then((data)=>{\n            return data;\n        }).catch((error)=>{\n            console.error(\"Lỗi khi lấy tin tức:\", error);\n            return null;\n        });\n    },\n    posttintuc (tintuc) {\n        return fetch(\"http://localhost:3000/tintucs\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Cache-Control\": \"no-cache\"\n            },\n            body: JSON.stringify(tintuc)\n        }).then((res)=>{\n            if (!res.ok) {\n                throw new Error(\"Lỗi: \".concat(res.status, \" \").concat(res.statusText));\n            }\n            return res.json(); // Trả về dữ liệu phản hồi từ server\n        }).then((data)=>{\n            console.log(\"Th\\xeam tin tức th\\xe0nh c\\xf4ng:\", data);\n            return data;\n        }).catch((error)=>{\n            console.error(\"Lỗi khi th\\xeam tin tức:\", error);\n            return null;\n        });\n    },\n    puttintuc (id, tintuc) {\n        return fetch(\"http://localhost:3000/tintucs/\".concat(id), {\n            method: \"PUT\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Cache-Control\": \"no-cache\"\n            },\n            body: JSON.stringify(tintuc)\n        }).then(async (res)=>{\n            if (!res.ok) {\n                throw new Error(\"Lỗi: \".concat(res.status, \" \").concat(res.statusText));\n            }\n            const text = await res.text();\n            try {\n                return JSON.parse(text); // Chuyển về JSON nếu có thể\n            } catch (error) {\n                console.warn(\"Phản hồi kh\\xf4ng phải JSON:\", text);\n                return text; // Nếu không phải JSON, trả về nội dung gốc\n            }\n        }).then((data)=>{\n            console.log(\"Cập nhập tin tức th\\xe0nh c\\xf4ng:\", data);\n            return data;\n        }).catch((error)=>{\n            console.error(\"Lỗi khi cập nhập tin tức:\", error);\n            return null;\n        });\n    },\n    deletetintuc (id, tintuc) {\n        return fetch(\"http://localhost:3000/tintucs/\".concat(id), {\n            method: \"DELETE\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Cache-Control\": \"no-cache\"\n            },\n            body: JSON.stringify(tintuc)\n        }).then(async (res)=>{\n            if (!res.ok) {\n                throw new Error(\"Lỗi: \".concat(res.status, \" \").concat(res.statusText));\n            }\n            const text = await res.text();\n            try {\n                return JSON.parse(text); // Chuyển về JSON nếu có thể\n            } catch (error) {\n                console.warn(\"Phản hồi kh\\xf4ng phải JSON:\", text);\n                return text; // Nếu không phải JSON, trả về nội dung gốc\n            }\n        }).then((data)=>{\n            console.log(\"X\\xf3a tin tức th\\xe0nh c\\xf4ng:\", data);\n            return data;\n        }).catch((error)=>{\n            console.error(\"Lỗi khi x\\xf3a tin tức:\", error);\n            return null;\n        });\n    },\n    getImageUrl: (imageName)=>{\n        if (imageName) {\n            return \"http://localhost:3000/uploads/\".concat(imageName);\n        }\n        return null;\n    },\n    uploadImage (formData) {\n        return fetch(\"http://localhost:3000/image/uploadImage\", {\n            method: \"POST\",\n            body: formData\n        }).then((res)=>{\n            if (!res.ok) {\n                throw new Error(\"Lỗi: \".concat(res.status, \" \").concat(res.statusText));\n            }\n            return res.json();\n        }).then((data)=>{\n            const filePath = data.filePath.reolace(/\\\\/g, \"/\");\n            const imageUrl = \"http://localhost:3000/uploads/\".concat(filePath);\n            console.log(\"Upload ảnh th\\xe0nh c\\xf4ng:\", imageUrl);\n            return imageUrl;\n        }).catch((error)=>{\n            console.error(\"Lỗi khi upload ảnh:\", error);\n            throw error;\n        });\n    }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (NewService);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./demo/service/NewService.js\n"));

/***/ })

});